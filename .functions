#!/usr/bin/env bash

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$_";
}

# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
	cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
	local tmpFile="${@%/}.tar";
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

	size=$(
		stat -f"%z" "${tmpFile}" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}" 2> /dev/null;  # GNU `stat`
	);

	local cmd="";
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli";
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz";
		else
			cmd="gzip";
		fi;
	fi;

	echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`…";
	"${cmd}" -v "${tmpFile}" || return 1;
	[ -f "${tmpFile}" ] && rm "${tmpFile}";

	zippedSize=$(
		stat -f"%z" "${tmpFile}.gz" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}.gz" 2> /dev/null; # GNU `stat`
	);

	echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully.";
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# Create a data URL from a file
function dataurl() {
	local mimeType=$(file -b --mime-type "$1");
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8";
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}";
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

# Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
function phpserver() {
	local port="${1:-4000}";
	local ip=$(ipconfig getifaddr en1);
	sleep 1 && open "http://${ip}:${port}/" &
	php -S "${ip}:${port}";
}

# Compare original and gzipped file size
function gz() {
	local origsize=$(wc -c < "$1");
	local gzipsize=$(gzip -c "$1" | wc -c);
	local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
	printf "orig: %d bytes\n" "$origsize";
	printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
}

# Run `dig` and display the most useful info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer;
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified.";
		return 1;
	fi;

	local domain="${1}";
	echo "Testing ${domain}…";
	echo ""; # newline

	local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
		| openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText=$(echo "${tmp}" \
			| openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
			no_serial, no_sigdump, no_signame, no_validity, no_version");
		echo "Common Name:";
		echo ""; # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
		echo ""; # newline
		echo "Subject Alternative Name(s):";
		echo ""; # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
			| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
		return 0;
	else
		echo "ERROR: Certificate not found.";
		return 1;
	fi;
}

# Normalize `open` across Linux, macOS, and Windows.
# This is needed to make the `o` function (see below) cross-platform.
if [ ! $(uname -s) = 'Darwin' ]; then
	if grep -q Microsoft /proc/version; then
		# Ubuntu on Windows using the Linux subsystem
		alias open='explorer.exe';
	else
		alias open='xdg-open';
	fi
fi

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

function instruct() {
    echo -e "*** ${1}"
    read -n 1 -s -r -p "Press any key to continue"
}

function is-running() {
	COUNT="$(ps aux | grep "${1}" | wc -l)"
	test "${COUNT}" -ne "1"
	return $?
}

function kube-dashboard() {
	clear && \
	export KOPS_STATE_STORE=s3://state.kops.store.centaur && \
	echo "Admin password: $(kops get secrets admin --type secret -oplaintext)" | grep password && \
	echo -e '\nKubernetes dashboard: http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/#!/service?namespace=_all' & \
	kubectl proxy > /dev/null
}

function weather-at() {
	clear

	CMD="ansiweather"
	if [ -n "${1}" ]; then
		CMD="${CMD} -l ${1}"
	fi
	if [ -n "${2}" ]; then
		CMD="${CMD} -f ${2}"
	fi

	eval "${CMD}"
}

function backup-plists() {
	if [ -n "${PLISTS_BACKUP_PATH}" ]; then
		TARGET_DIR="${PLISTS_BACKUP_PATH}"
	elif [ -n "${1}" ]; then
		TARGET_DIR="${1}"
	else
		echo "Directory target is missing as first argument, exiting..."
		return 1
	fi

	mkdir -p "${TARGET_DIR}"
	# rm -f "${TARGET_DIR}"/./*
	for FILE in /Users/user/Library/Preferences/*.plist ; do
		BASENAME="$(basename ${FILE})"
		echo "Reading ${BASENAME}..."
		defaults read ${FILE} > "${TARGET_DIR}/${BASENAME}"
	done
}

function run-once-in-background() {
	CHECK="$(basename ${1})"
	# echo "Checking for ${CHECK}"
	pgrep "${CHECK}" 2>&1 > /dev/null
	if [ $? -eq 0 ]; then
		# echo "Command ${CHECK} is running"
	# else
		echo "Inititating command in the background: ${@}"
		# sudo mkdir -p "/var/log/background" && sudo chmod -R 777 "/var/log/background/"
		# ( ${@} 2>&1 "/var/log/background/${CHECK}.log" ) &
		${@} &
	fi
}

function download-to-tmp() {
	TEMP_TARGET="/tmp/$(date +'%s')"
	mkdir -p "${TEMP_TARGET}"
	cd "${TEMP_TARGET}"
	# echo "Files will be saved in $(pwd)..."
	curl -L -J -O "${1}" || exit 1
  TEMP_FILE="$(ls | head -n 1)"
  echo "${TEMP_TARGET}/${TEMP_FILE}"
}

function download-and-add-to-path() {
	TEMP_FILE="$(download-to-tmp)"
	chmod +x "${TEMP_FILE}"
  sudo mv "${TEMP_FILE}" /usr/local/binary
	BASENAME="$(basename ${FILE})"
	if [ which "${BASENAME}" 2>&1 > /dev/null ]; then
		echo "'${BASENAME}' was added successfully to path"
	else
		echo "Adding '${BASENAME}' to path failed..."
		exit 1
	fi
}

function download-and-open() {
	TEMP_FILE="$(download-to-tmp)"
  open "${TEMP_FILE}"
  instruct "Finalize the installation manually..."
}

function clr() {
	$@ | ccze
}
